name: docker-build
on:
  push:
    branches:
      - 'master'
  pull_request:
    types: ['labeled', 'opened', 'synchronize', 'reopened']

concurrency:
  group: ${{ github.head_ref }} || concat(${{ github.ref }}, ${{ github.workflow }})
  cancel-in-progress: true

jobs:
  docker-build-devcontainer:
    runs-on: ubuntu-latest
    if: |
      github.repository == 'azerothcore/azerothcore-wotlk'
      && !github.event.pull_request.draft
      && (github.ref_name == github.event.repository.default_branch ||
          contains(github.event.pull_request.labels.*.name, 'run-build') ||
          github.event.label.name == 'run-build')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Compile azerothcore in devcontainer
        run: |
          docker compose -f .devcontainer/docker-compose.yml run ac-dev-server bash -c "./acore.sh compiler build"

  docker-build-base:
    runs-on: ubuntu-latest
    if: |
      github.repository == 'azerothcore/azerothcore-wotlk'
      && !github.event.pull_request.draft
      && (github.ref_name == github.event.repository.default_branch ||
          contains(github.event.pull_request.labels.*.name, 'run-build') ||
          github.event.label.name == 'run-build')
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Compile azerothcore
        uses: docker/build-push-action@v4
        with:
          push: false
          file: apps/docker/Dockerfile
          target: build
          tags: acore/ac-wotlk-build:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-build-services:
    needs: "docker-build-base"
    strategy:
      fail-fast: true
      matrix:
        build_target:
          - repo: "acore/ac-wotlk-worldserver"
            target: worldserver
          - repo: "acore/ac-wotlk-authserver"
            target: authserver
          - repo: "acore/ac-wotlk-db-import"
            target: db-import
          - repo: "acore/ac-wotlk-client-data"
            target: client-data
          - repo: "acore/ac-wotlk-tools"
            target: tools
    runs-on: "ubuntu-latest"
    env:
      COMPOSE_DOCKER_CLI_BUILD: 1
      DOCKER_BUILDKIT: 1
    steps:
      # TODO: re-evaluate disk usage requirements
      - name: Remove unneeded tooling due to disk space requirements
        run: |
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: get acore version
        id: version
        run: |
          version="$(jq -r '.version' < acore.json)"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        if: github.repository == 'azerothcore/azerothcore-wotlk' && github.ref_name == github.event.repository.default_branch
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v4
        with:
          file: apps/docker/Dockerfile
          # TODO: @michaeldelago: use the GHA expression after this is approved
          push: false # ${{ github.repository == 'azerothcore/azerothcore-wotlk' && \
                      #     github.ref_name   == github.event.repository.default_branch }}
          target: ${{ matrix.build_target.target }}
          tags: ${{ matrix.build_target.repo }}:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dispatch-acore-docker:
    needs: docker-build-services
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        if: github.repository == 'azerothcore/azerothcore-wotlk' && github.ref_name == 'master'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.ACORE_DOCKER_REPO_ACCESS_TOKEN }}
          repository: azerothcore/acore-docker
          event-type: azerothcore-new-images
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
